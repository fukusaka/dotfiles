;; -*-emacs-lisp-*-
;; $Id$

;; ニュースに流れていたソースでラップ。
;;; Wrapper to make .emacs self-compiling.
;;; (To recompile .emacs interactively, just reload it.)
;;; Author: Bill Brodie <wbrodie@panix.com>   Last Rev: Fri Apr 7 10:19 1995
;;; Changed by Kazushi Jam Marukawa <jam@pobox.com>

(defvar init-top-level t)
(defvar init-complete nil)

(if init-top-level
    (let ((init-top-level nil)
	  (elc-filename
	   (cond ((string< emacs-version "19") "~/.emacs18.elc")
		 ((string< emacs-version "20") "~/.emacs19.elc")
		 ((string< emacs-version "21") "~/.emacs20.elc")
		 (t "~/.emacsxx.elc"))))
      (if (file-newer-than-file-p "~/.emacs" elc-filename)
          (progn
            (or init-complete (load "~/.emacs" nil t t))
            (byte-compile-file "~/.emacs")
	    (if (file-exists-p "~/.emacsc")
		(rename-file "~/.emacsc" elc-filename t))
	    (if (file-exists-p "~/.emacs.elc")
		(rename-file "~/.emacs.elc" elc-filename t)))
        (or init-complete (load elc-filename nil t t))))
(progn

;;;     <Your current .emacs file here, unchanged>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; 日本語環境でEUCをメインにする設定
;;
;; しかし、.emacs のみは iso-2022-jp (jis code?)で書かないと
;; 化ける、、、とほ。
;;
;; ~/.login -->
;;   alias emacs "(setenv XMODIFIERS '@im=none'; exec /usr/bin/emacs )"
(cond
 ;; Ver.19 の場合
 ((string-match "^19" emacs-version)
  (if (boundp 'MULE)
      (progn
	(set-primary-environment 'japanese)
	(set-display-coding-system         *euc-japan*)
	(set-keyboard-coding-system        *euc-japan*)
	(set-default-file-coding-system    *euc-japan*)
	(set-default-process-coding-system *euc-japan* *euc-japan*)	
	(define-program-coding-system nil nil (cons *euc-japan* *euc-japan*))
	;; モードコードの表示の設定
	;; (setq mc-verbose-code t)
	))
  )
 ;; Ver.20 の場合(不十分かなぁ)
 ((string-match "^20" emacs-version)
  (set-language-environment          'Japanese)
  ;; ほとんどの場合 euc-japan-unix を使う
  (set-default-coding-systems       'euc-japan-unix)
  ;; emacs -nw では、上では遅すぎなので、、、本当か？
  (set-terminal-coding-system       'euc-japan-unix)
  ;; フォント設定(Xリソースで設定するのがベスト)
  ;; ~/.Xresources -->
  ;;   Emacs.Font: -*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-standard
  ;; (set-default-font "fontset-standard")
  ;; (set-default-font "-*-fixed-*-r-normal-*-16-*-*-*-*-*-fontset-standard")
  ;; scroll bar を右にする設定。
  (set-scroll-bar-mode 'right)
  (if nil
  (if (not window-system)
      (progn
	;; Translate `C-h' to <DEL>.
	(keyboard-translate ?\C-h ?\C-?)
       
	;; Translate <DEL> to `C-h'.
	(keyboard-translate ?\C-? ?\C-h)
       ))
  )
  )
 )

(setq text-mode-hook
      '(lambda () (auto-fill-mode 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; 表示の細かい設定
;;
(setq next-line-add-newlines nil)
(setq line-number-mode t)
(setq column-number-mode t)
(setq scroll-step 1)

(if (not window-system)
    (menu-bar-mode 0))

;;(setq truncate-lines t)
;; 時計の表示
;;(setq display-time-day-and-date nil)
;;(display-time)

;; Xの設定で鳴らさないようにするので、、。
;; ~/.xsession -->
;;   xset b off
(if (not window-system)
    (setq visible-bell t)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; キーの設定
;;
(define-key global-map "\C-j" 'goto-line)
(define-key global-map "\M-c" 'compile)
(define-key global-map "\M-m" 'man)
(define-key global-map "\C-xm" 'mew)

(global-unset-key "\C-z")
(define-key global-map "\C-zz" 'toggle-shell-default)
(define-key global-map "\C-z\C-z" 'toggle-shell-default)
(define-key global-map "\C-zs" 'toggle-shell)
(define-key global-map "\C-z\C-s" 'toggle-shell)
(define-key global-map "\C-zr" 'toggle-scheme)
(define-key global-map "\C-z\C-r" 'toggle-scheme)

;; ワンタッチでシェルに行ける
;; トルグにしたいもし
(defun toggle-shell-default ()
  (interactive)
  (toggle-run-mode '(shell)))

(defun toggle-shell ()
  (interactive)
  (toggle-run-mode '(shell) "*shell*"))

(defun toggle-scheme ()
  (interactive)
  (toggle-run-mode '(run-scheme "/usr/bin/guile") "*scheme*"))

(defvar toggle-run-mode-list
  '("*shell*"
    "*scheme*"
    "*tex-shell*"
    ))

;; 明示的に、toggle-run-mode を使わなければ、toggle-run-mode-list を
;; 使う。
(defun toggle-run-mode (run-command &optional toggle-run-mode)
  (if (let ((mode-list
	     (if (stringp toggle-run-mode)
		 (list toggle-run-mode)
	       toggle-run-mode-list)))
	(eval (cons 'or 
		    (mapcar (function
			     (lambda (run-mode)
			       (string= (buffer-name) run-mode)))
			    mode-list))))
      (switch-to-buffer (prog1 (other-buffer (current-buffer))
			  (bury-buffer (current-buffer))))
    (eval run-command)
    ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; コマンド入力の設定 (comint-mode)
;;

;; ヒストリ数を設定する。
(setq comint-input-ring-size 200)

;; Password を隠しまほう
(add-hook 'comint-output-filter-functions
	  'comint-watch-for-password-prompt)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; かんなを使う設定
;;
(cond
 ;; Ver.19 の場合
 ((string-match "^19" emacs-version)
  (if (boundp 'MULE)
      (progn
	(if (and (boundp 'CANNA) CANNA) ; 『かんな/emacs』であることを確認して
	    ;; 『かんな/emacs』 の場合だけ以下を実行します。
	    (progn
	      (cond ((boundp 'egg-version)
		     (require 'can-n-egg)
		     (can-n-egg))
		    (t
		     (require 'canna)
		     (canna)
		     ;; (global-set-key "\C-o" 'canna-toggle-japanese-mode)
		     ))
	      (setq canna-use-color t)
	      ))
	;;
	;; たまごでの補足
	;;
	(if (boundp 'egg-version)
	    (progn
	      (setq enable-double-n-syntax t)
	      (its-defrule "dhi" "でぃ" nil nil "roma-kana")
	      (its-defrule "dhu" "でゅ" nil nil "roma-kana")
	      (its-defrule "A" "ぁ" nil nil "roma-kana")
	      (its-defrule "I" "ぃ" nil nil "roma-kana")
	      (its-defrule "U" "ぅ" nil nil "roma-kana")
	      (its-defrule "E" "ぇ" nil nil "roma-kana")
	      (its-defrule "O" "ぉ" nil nil "roma-kana")
	      ))
	)))
 ;; Ver.20 の場合(不十分)
 ((string-match "^20" emacs-version)
  (if (featurep 'canna-leim)
      (progn
	;; 常に『かんな/emacs』なので、、、。
	(set-input-method "japanese-canna")
	;; とっても簡単になったもんだ〜ぁ。
	)
    ;; かんなよ戻って来てくれ！
    ;;(load "yc")
    ;;(define-key yc-fence-mode-map "\C-j" 'yc-modeless-next)
    ;;(setq yc-stop-chars "(){}<>$\"\'")
    ))
 ((featurep 'xemacs)
  (if (featurep 'canna-leim)
      (select-input-method "japanese-canna")
    ))
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; 色を付ける共通設定
;;
(if window-system
    (cond
     ;; mule2.3 では hilit19 を使う
     ((string-match "^19" emacs-version)
      (setq hilit-mode-enable-list  '(not text-mode)
	    hilit-background-mode   'light
	    hilit-inhibit-hooks     nil
	    hilit-inhibit-rebinding nil
	    hilit-quietly t)
      (require 'hilit19)


      ;; troff で色を付ける設定
      (add-hook 'nroff-mode-hook 
		(function (lambda ()
			    (hilit-translate 	string	  nil)
			    )))
      )
     ;; emacs20 では font-lock を使う
     ((string-match "^20" emacs-version)
      (global-font-lock-mode 1)
      (setq font-lock-support-mode
	    '((c-mode . fast-lock-mode)
	      (c++-mode . fast-lock-mode)
	      (cc-mode . fast-lock-mode)
	      ))
      (defface moi-string-face
	'((((class color) (background light)) (:foreground "Brown"))
	  (((class color) (background dark)) (:foreground "Salmon"))
	  (t (:italic t)))
	nil
	)
      (setq font-lock-string-face 'moi-string-face)
      )
     ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; 圧縮ファイルを自動に展開、圧縮
;;
;; tar-mode と組み合わせるとEUCが化けるんだが、、、。
;; JISだけうまく表示出来る、、、そらそうだ。
;; ver19 ではコケル、、、

(cond
 ((string-match "^20" emacs-version)
  (auto-compression-mode)

  ;; bzip2, a block-sorting file compressor.  Version 0.9.0, 30-Aug-98.
  (setq jka-compr-compression-info-list 
	(append
	 '(["\\.bz2\\'"
	    "bzip2ing"        "bzip2"         ()
	    "bunzip2ing"      "bzip2"         ("-d")
	    nil t])
	 jka-compr-compression-info-list))
  ))

;;; Matches IF from top of file
))
