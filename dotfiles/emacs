;;; -*-emacs-lisp-*-
;;; $Id$

;;; ニュースに流れていたソースでラップ。
;;; Wrapper to make .emacs self-compiling.
;;; (To recompile .emacs interactively, just reload it.)
;;; Author: Bill Brodie <wbrodie@panix.com>   Last Rev: Fri Apr 7 10:19 1995
;;; Changed by Kazushi Jam Marukawa <jam@pobox.com>

(defvar init-top-level t)
(defvar init-complete nil)

(if init-top-level
    (let ((init-top-level nil)
	  (elc-filename
	   (cond ((string< emacs-version "19") "~/.emacs18.elc")
		 ((string< emacs-version "20") "~/.emacs19.elc")
		 ((string< emacs-version "21") "~/.emacs20.elc")
		 ((string< emacs-version "22") "~/.emacs21.elc")
		 ((string< emacs-version "23") "~/.emacs22.elc")
		 (t "~/.emacsxx.elc"))))
      (if (file-newer-than-file-p "~/.emacs" elc-filename)
          (progn
            (or init-complete (load "~/.emacs" nil t t))
            (byte-compile-file "~/.emacs")
	    (if (file-exists-p "~/.emacsc")
		(rename-file "~/.emacsc" elc-filename t))
	    (if (file-exists-p "~/.emacs.elc")
		(rename-file "~/.emacs.elc" elc-filename t)))
        (or init-complete (load elc-filename nil t t))))
(progn

;;;     <Your current .emacs file here, unchanged>

;;;;INSERT_DOT_EMACS
;;
;; 日本語環境で UTF-8 をメインにする設定
;;

;; 日本語環境
(set-language-environment 'Japanese)

;; Windows系はロケールに従う
(unless (or (eq system-type 'windows-nt)
	    (eq system-type 'cygwin))

  ;; UTF-8を設定
  (prefer-coding-system 'utf-8)

  ;; locale に無関係に UTF8 を設定
  (setq default-file-name-coding-system 'utf-8)
  
  ;; プロセスの環境変数設定
  (setenv "LANG" "ja_JP.UTF-8"))

;; GNU/Linux で egg-anthy を使う設定
(if (eq system-type 'gnu/linux)
    (set-language-info "Japanese" 'input-method "japanese-anthy"))
;;
;; 標準設定
;;

;; 操作/表示の細かい設定
(setq inhibit-startup-message nil)	;; オープニングは大事
(setq next-line-add-newlines nil)	;; カーソルで新しい行を作らない
(setq line-number-mode t)		;; modeline に行番号表示
(setq column-number-mode t)		;; modeline にカラム番号表示
(setq scroll-step 1)			;; スクロールは1行づつ
(setq truncate-lines nil)		;; 継続行は使わない
(setq transient-mark-mode nil)		;; Region に色付けない

;; Beep 音を鳴らさない
;;(setq visible-bell t)
(setq ring-bell-function '(lambda ()))
;; ~/.xsession -->  xset b off

;; 端末ではメニューバーを消す
(if (and (not window-system) (fboundp 'menu-bar-mode))
    (menu-bar-mode 0))

;; scroll-bar は右側
(if (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode 'right))

;; tool-bar は消す
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

;; 時計の表示
(setq display-time-day-and-date nil)
(display-time)

;; ヒストリ数を設定する。
;;(setq comint-input-ring-size 200)

;; Emacs内部端末で Password を隠しまほう
(add-hook 'comint-output-filter-functions
	  'comint-watch-for-password-prompt)

;; EDITOR=emacsclientで emacs で開く
;;(server-start)

;; Windows系でCygwinのBashを使う
(when (and (or (eq system-type 'windows-nt)
	       (eq system-type 'cygwin))
	   (executable-find "bash"))
  (setq shell-file-name "bash")
  (setenv "SHELL" shell-file-name)
  (setenv "CYGWIN" "binmode nontsec tty")

  (add-hook 'comint-output-filter-functions
	    'comint-strip-ctrl-m)
  )
;;
;; 自動識別するモードの設定
;;

(setq auto-mode-alist
      (append
       '(
	 ("\\.h\\'" . c++-mode)
	 ("\\.pl\\'" . perl-mode)
	 ("\\.CPP\\'" . c++-mode)
	 ("patch" . moi-patch-view-mode)
	 ("\\.diff" . moi-patch-view-mode)
	 ("\\.pgc\\'" . c-mode)
	 ("\\.pgcc\\'" . c++-mode)
	 )
       auto-mode-alist))

(autoload 'moi-patch-view-mode "moi-patch-view")
(autoload 'moi::sample-ascii "moi-sample-ascii" "" t)
;;
;; フォント/フレーム初期位置の設定
;;

(when window-system

  ;; Frame サイズ位置の固定
  (add-to-list 'initial-frame-alist '(width . 80))
  (add-to-list 'initial-frame-alist '(height . 40))
  (add-to-list 'default-frame-alist '(width . 80))
  (add-to-list 'default-frame-alist '(height . 40))

  (cond
   ;; MacOSX
   ((eq window-system 'mac)
    (add-to-list 'initial-frame-alist '(top . 26))
    (add-to-list 'initial-frame-alist '(left . 4))
    (add-to-list 'default-frame-alist '(alpha . (95 90)))
    (setq frame-alpha-lower-limit 30)
    )
   ;; X
   ((eq window-system 'x)
    (add-to-list 'initial-frame-alist '(top . 25))
    (add-to-list 'initial-frame-alist '(left . 0))
    )
   )

  ;; Font 設定
  (cond
   ;; Ver.21 以前
   ((<= emacs-major-version 21)
    (set-default-font "fontset-standard"))

   ;; CarbonEmacs
   ((eq window-system 'mac)
    (require 'carbon-font)
    (setq mac-allow-anti-aliasing t)
    (fixed-width-set-fontset "hirakaku_w3" 12)
    )
   
   ;; Windows
   ((eq window-system 'w32)

    (set-frame-font "Courier New-10")
    ;;(set-frame-font "Inconsolata\-dz-10")
    (let ((fs (frame-parameter nil 'font))
    	  (ff "Meiryo")
    	  ;;(ff "MSGothic")
    	  (sz 12))
      (set-fontset-font fs
			'japanese-jisx0208
			(font-spec :family ff :size sz))
      (set-fontset-font fs
    			'katakana-jisx0201
    			(font-spec :family ff :size sz))
      )

    ;; IPA
    ;;(set-frame-font "IPAGothic-12")
    )

   ;; X / emacs22
   ((and (eq window-system 'x)
	 (= emacs-major-version 22))

    (dolist (fspec '("-*-fixed-medium-r-normal--12-*-*-*-*-*-fontset-12"
		     "-*-fixed-medium-r-normal--14-*-*-*-*-*-fontset-14"
		     "-*-fixed-medium-r-normal--16-*-*-*-*-*-fontset-16"
		     "-*-fixed-medium-r-normal--18-*-*-*-*-*-fontset-18"))
      (unless (assoc fspec fontset-alias-alist)
	(create-fontset-from-fontset-spec fspec)))
    
    (add-to-list 'default-frame-alist '(font . "fontset-14"))
    )

   ;; X / emacs23
   ((and (eq window-system 'x)
	 (= emacs-major-version 23))

    (add-to-list 'default-frame-alist '(font . "VL Gothic-10"))
    )

   ))
;;
;; 色を付ける共通設定
;;

(global-font-lock-mode t)

;; jit-lock-mode を使う
(setq font-lock-support-mode 'jit-lock-mode)

(defface moi-string-face
  '((((class color) (background light)) (:foreground "Brown"))
    (((class color) (background dark)) (:foreground "Salmon"))
    (t (:italic t)))
  nil
  )
(setq font-lock-string-face 'moi-string-face)

;;
;; Dired-X を使う設定
;;

;; 追加の省略する拡張子
(setq moi::dired-omit-extensions
      '(".o" ".elc" "~" ".bin" ".lbin" ".fasl"
	".a" ".ln" ".fmt" ".lo" ".flc" ".flh" ))

;; 表示を省略するファイルと拡張子の設定
(cond
 ((featurep 'mac-carbon)
  (setq moi::dired-omit-files "^#\\|^\\.\\|^Desktop D[BF]$\\|Icon\015"))
 (t
  (setq moi::dired-omit-files "^#\\|^\\.")))

;; GNU Emacs に追加バインド
(autoload 'dired-jump "dired-x" nil t nil)
(autoload 'dired-jump-other-window "dired-x" nil t nil)
(define-key global-map "\C-x\C-j" 'dired-jump)
(define-key global-map "\C-x4\C-j" 'dired-jump-other-window)

;; for emacs 22
(if (>= emacs-major-version 22)
    (defalias 'dired-omit-toggle 'dired-omit-mode))

;; 
(add-hook 'dired-load-hook
	  '(lambda ()
	     (require 'dired-x)

	     ;; モードキーの設定
	     (define-key dired-mode-map "\M-o" 'dired-omit-toggle)
	     (define-key dired-mode-map "f" 'dired-do-shell-command)
	     (define-key dired-mode-map "U" 'dired-unmark-all-files-no-query)
	     
	     ;; Set dired-x variables here.  For example:
	     ;;(setq dired-guess-shell-gnutar "tar")
	     ;;(setq dired-guess-shell-znew-switches t)
	     ;;(setq dired-x-hands-off-my-keys nil)

	     (setq dired-omit-files moi::dired-omit-files)
	     (setq dired-omit-extensions
		   (append moi::dired-omit-extensions
			   dired-omit-extensions))
	     ))

;; 初期で omit 状態
(add-hook 'dired-mode-hook '(lambda () (dired-omit-toggle)))
;;
;; compile-mode
;;
(setq compilation-ask-about-save nil)
(setq compilation-window-height 20)

;;(which-function-mode)

(setq vc-follow-symlinks t)


(add-hook 'c-mode-common-hook
          '(lambda ()
	     (c-set-style "bsd")))

(setq cperl-indent-level 4)

;;(defadvice cd (around remote-cd (path))
;;  (progn
;;    (message path)
;;    ad-do-it))
;;
;;(defadvice compilation-start (around ad-compilation-remote-start-ext activate)
;;  (progn
;;    (ad-activate 'cd)
;;    ad-do-it
;;    (ad-deactivate 'cd)))

(setq glib-types
      '("gboolean" "gpointer" "gconstpointer"
	"gchar" "guchar" "gint" "guint"
	"gshort" "gushort" "glong" "gulong"
	"gint8" "guint8" "gint16" "guint16"
	"gint32" "guint32" "gint64" "guint64"
	"gfloat" "gdouble" "gsize" "gssize"))

(add-hook
 'c-mode-common-hook
 '(lambda ()
    (setq c-font-lock-extra-types (append c-font-lock-extra-types glib-types))
    (setq c++-font-lock-extra-types (append c++-font-lock-extra-types glib-types))))
;;
;; tramp 設定
;;

(when (<= emacs-major-version 22)
  (autoload 'tramp-compile "tramp-util")
  (define-key global-map "\M-c" 'tramp-compile)
  (define-key global-map "\C-zc" 'tramp-compile))

(cond

 ((eq system-type 'windows-nt)

  (setq tramp-default-user "shoichi")
  ;; minibufferで入力するときユーザ名の最後の１文字が落る
  ;; login 処理に不具合い？かなぁ。
  (setq tramp-debug-buffer t)
  (setq tramp-verbose 10)

  (cond
   ((executable-find "plink")
    (setq tramp-default-method "plink")
    (setq tramp-completion-without-shell-p t)
    (modify-coding-system-alist 'process "plink" 'utf-8-unix)
    ))
  )

 ;; その他
 (t
  (setq tramp-default-method "ssh")))

;;; Matches IF from top of file
))
