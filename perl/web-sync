#!/usr/bin/perl
# $Id$

# web-sync.pl --
#
# Copyright (C) 1999 Moimoi(Shoichi Fukusaka)
#
# Author: Moimoi(Shoichi Fukusaka) <fukusaka@xa2.so-net.ne.jp>
# Maintainer: Moimoi(Shoichi Fukusaka) <fukusaka@xa2.so-net.ne.jp>
# Created: 27 Oct 1999
# Version: 1.0
# Keywords: 

# This file is part of 

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use Getopt::Std;
use DirHandle;
use Net::FTP;

###############
sub read_config {
  local ($config) = @_;
  local($name,$value);
  
  open(CONFIG,$config) || die "Not Config File $config ...";

  while (<CONFIG>) {
    s/#.*$//;
    s/^\s*(.*[^\s])\s*$/$1/;
    next if /^\s*$/;
    /(.*[^\s])\s*=\s*(.*)/;
    $name = $1;
    $value = $2;
    eval "\$$1=\"$2\"";
  }
  close CONFIG;
};

###############
sub ftp_init {
  $ftp = Net::FTP->new($ftphost,Passive=>1);
  defined($ftp) || die "Not Connect $ftphost";
  $ftp->login($login,$password);
  $ftp->binary();
  $ftpdir = $ftp->pwd() . "/" . $dstdir;
}

###############
sub ignore_file {
  local ($file) = @_;

  return 1 if ($file =~ /^\./);
  return 1 if ($file =~ /~$/ );

  return 0;
}

###############
sub search_list {
  local ($value,@list) = @_;
  
  foreach $data (@list) {
    return 1 if ( $data eq $value )
  }
  return 0;
}

###############
sub search_hashlist {
  local ($key,$value,@list) = @_;
  
  foreach $data (@list) {
    return $data if ( $$data{$key} eq $value )
  }
  return {};
}

###############
sub get_listdata {
  local ($dirname,$listfile) = @_;
  local ($listdata);
  local ($var);

  $listdata = {};

  open(LIST,$listfile) || return $listdata;

  while ($var = <LIST>) {
    chop $var;
    ($mode,$length,$cksum,$md5sum,$file) = split("[ ]+",$var);

    ${$listdata}{$file} = { mode => oct($mode),
			    length => $length,
			    cksum => $cksum,
			    md5sum => $md5sum,
			    file => $file};
  }
  close LIST;

  return $listdata;
}

###############
sub get_ftplist {
  local ($dirname) = @_;
  local (@filelist_ftp);
  local (@list_ftp);
  local ($file_long);
  local (@dir_ftp);
  local (@vars);

  @list_ftp = $ftp->ls;
  @dir_ftp = $ftp->dir; shift @dir_ftp;

  foreach $file_long (@dir_ftp) {
    @vars = split("[ ]+",$file_long);
    $file = $vars[$#vars];      
    $length = $ftp->size($file);
    $rmode = $vars[0];
    $mode = 0;
    for ($i=0;$i<9;$i++) {
      $mode |= (1 << (8-$i)) if (substr($rmode,$i+1,1) ne "-");
    }
    next if ($file eq "." || $file eq "..");
    # printf("%s %3o %d %s\n",$rmode,$mode,$length,$file);
    push(@filelist_ftp,{ file => $file,
			 mode => $mode,
			 length => $length,
			 isdir => ($rmode =~ /^d/) });
  }
  return @filelist_ftp;
}

###############
sub ftp_delete {
  local ($dir) = @_;
  local (@filelist);
  local ($file,$dir2);

  #print "delete --> ", $dir,"\n";
  $ftp->cwd($dir);

  @filelist = $ftp->ls;
  foreach $file (@filelist) {
    next if ($file =~ /^\.\.?$/);
    next if ($file eq "");
    $ftp->delete($file);
  }

  @filelist = $ftp->ls;
  #print scalar(@filelist),join(" - ",@filelist),"\n";
  foreach $dir2 (@filelist) {
    next if ($dir2 =~ /^\.\.?$/);
    next if ($dir2 eq "");
    print $dir2;
    ftp_delete($dir2);
  }

  $ftp->cwd("..");
  $ftp->rmdir($dir);
}

###############
sub check_file {
  local ($dirname) = @_;
  local ($file,$dir);
  local (@filelist,@dirlist);
  local (@filelist_ftp,$file_ftp);
  local ($fullname,$var);
  local ($listdata);
  local ($newlistfile);
  
  #print "##dirname## $srcdir$dirname\n";
  
  $listdata = &get_listdata($dirname,".list");
  @filelist_ftp = &get_ftplist($dirname);

  ## Local File List Up
  $dir = new DirHandle(".");
  if (defined $dir) {
    while (defined($file = $dir->read)) {
      $fullname = $srcdir . $dirname . $file; 
      next if (ignore_file($file));
      -f $fullname && push(@filelist,$file);
      -d $fullname && push(@dirlist,$file);
    }
  }
  $dir->close;
  #print "##file##\n",join("\n",@filelist),"\n";

  $newlistfile = ".list.new";
  open(LISTNEW,">$newlistfile") || die "can't open $newlistfile";

  ## File Check Main Loop
  foreach $file (@filelist) {
    $stat = "";

    open(CKSUM,"cksum $file |") || die "cksum failed!";
    $var = <CKSUM>;
    close CKSUM;
    #print;
    ($cksum,$length) = split("[ ]+",$var);
    
    open(MD5SUM,"md5sum $file |") || die "cksum failed!";
    $var = <MD5SUM>;
    close MD5SUM;
    #print;
    ($md5sum) = split("[ ]+",$var);

    ($dev,$ino,$mode) = stat($file);
    $mode &= 0775;

    printf(LISTNEW "%3o %10d %10s %s %s\n",$mode,$length,$cksum,$md5sum,$file);

    $file_ftp = search_hashlist("file",$file,@filelist_ftp);
    if (${$file_ftp}{'file'} ne $file
	|| !defined($$listdata{$file}) ) {
      print "New file $file\n" if ($verbose);
      $ftp->put($file);
    } else {
      if (defined($$listdata{$file})
	  && ${$$listdata{$file}}{'length'} eq $length
	  && ${$$listdata{$file}}{'cksum'}  eq $cksum
	  && ${$$listdata{$file}}{'md5sum'} eq $md5sum
	  && $length == ${$file_ftp}{'length'} ) {
	# Non-modified file
      } else {
	# Modified file
	print "Modified file $file\n" if $verbose;
	$ftp->put($file);
      }
    }
  }
  close LISTNEW;

  ## Mode Check Loop
  $listdata = &get_listdata($dirname,".list.new");
  @filelist_ftp = &get_ftplist($dirname);
  foreach $file (@filelist) {
    $ftp->site("CHMOD",sprintf("%3o",${$$listdata{$file}}{'mode'}),$file)
      unless ( ${search_hashlist("file",$file,@filelist_ftp)}{'mode'}
	       == ${$$listdata{$file}}{'mode'});
  }

  #print "##dir##\n",join("\n",@dirlist),"\n";
  rename ".list.new",".list";

  ## Banish File Check Loop
  foreach $data (@filelist_ftp) {
    next if $$data{'isdir'};
    $file = $$data{'file'};
    #print $file," --- ",join(",",@filelist),"\n";
    if (!search_list($file,@filelist)) {
      print "Banish File $file\n" if $verbose;
      $ftp->delete($file)
    }
  }

  ## Sub Directory
  foreach $dir (@dirlist) {
    if (!${search_hashlist("file",$dir,@filelist_ftp)}{'isdir'}) {
      print "New Directory $dir\n" if ($verbose);
      $ftp->mkdir($dir);
      $ftp->site("CHMOD",$dirmode,$dir);
    }
    chdir $dir; $ftp->cwd($dir);
    check_file($dirname . $dir . "/");
    chdir ".."; $ftp->cwd("..");
  }

  ## Banish Directory Check Loop
  foreach $data (@filelist_ftp) {
    next unless $$data{'isdir'};
    $dir = $$data{'file'};
    if (!search_list($dir,@dirlist)) {
      print "Banish Directory $dir\n" if $verbose;
      ftp_delete($dir)
    }
  }

}

###############
sub main {
  getopt('fv');

  $config = $opt_f if ($opt_f ne "");

  if ($config ne "") {
    read_config $config;
  } else {
    die "Can't Read Config File !?";
  }

  $verbose = 1 if $opt_v;

  ftp_init;
  chdir $srcdir; $ftp->cwd($ftpdir);
  check_file;
}

###############
main;

# test.pl ends here
